# Note: This code has been run on Posit (previously known as R Studio). I saved the "NBA team data" file in the working directory.


# ----------------    Import pandas package    ---------------- 

import pandas as pd


# ----------------       Import dataset         ---------------- 


nba = pd.read_excel("NBA_team_data.xlsx")


# ----------------        Read the data         ---------------- 


nba.columns  # column labels of the DataFrame

nba.info     # print a consice summary of a DataFrame

nba.dtypes   # Return the dtypes in the DataFrame.

nba.select_dtypes(include='float64')   # Return a subset of the DataFrameâ€™s columns based on the column dtypes.

nba.select_dtypes(exclude='float64')   # I have four 'float64' columns (WIN%, FG%, 3P%, FT%) which won't return

nba.values  # Return a Numpy representation of the DataFrame

nba.ndim    # Return an int representing the number of axes / array dimensions.

nba.size    # Return an int representing the number of elements in this object.

nba.shape   # Return a tuple representing the dimensionality of the DataFrame. (Number of columns, number of rows)

nba.head(5) # Return the first 5 rows

nba.tail(5) # Return the last 5 rows

nba.describe() # Generate descriptive statistics.

nba_copy = nba.copy() # Create a copy of the dataframe

nba.pop('W') # Return column and drop from dataframe


# ----------------        Data analysis       ---------------- 

# Add a new column displaying the difference between W and L

nba['difference'] = nba['W']-nba['L']

nba['Total_games'] = nba.iloc[:,3:5].sum(axis=1). # Create a new column to add up games won and lost

nba['Total'] = nba.iloc[:,3:5].sum(axis=1) # We need to include one more column at the end. I want to add up columns 3 and 4

# Select columns TEAM and GP (games played)

nba = nba [['TEAM','GP']]

nba2 = nba[['TEAM']]

# group by one column and sum

nba3 = nba.groupby(['Season']).sum()

# group by one column and more operations

nba_2 = nba[['TEAM','PTS']]
nba_3 = nba_2.groupby(['TEAM']).sum().sort_values('PTS', ascending = False)
nba_3_one_line=nba[['TEAM','PTS']].groupby(['TEAM']).sum().sort_values('PTS',ascending=False)
nba4 = nba[['TEAM','PTS', 'BLK']].groupby(['TEAM']).sum(['PTS', 'BLK']).sort_values('PTS', ascending=False)

#filter by Miami and Lakers and then group by team and sum points

nba_filter_ML = nba[['TEAM', 'PTS']]

nba_filter_ML2= nba_filter_ML.loc[
  (nba.TEAM =='Miami Heat') | (nba.TEAM == 'Los Angeles Lakers'),
  :
]

nba_filter_ML3 = nba_filter_ML2.groupby(['TEAM']).sum('PTS').sort_values('PTS', ascending = False)

# Update a single value using iloc for it
 
nba.iloc[0,28] = 84  # Updata the first value of the last column

# Drop a column

nba=nba.drop(columns=['difference'])

# Drop rows

nba.isnull().sum(). # number of rows with Null values

nba.dropna(inplace=True)  #drop all rows with NA values

# Sort values

nba=nba.sort_values('PTS', ascending = False)

nba=nba.sort_values(by=['W','PTS'], ascending=False)

nba.sort_values(by=['W','PTS'], ascending=False,inplace=True) #inplace can be used as well

# Group by 

nba[['Season','PTS']].groupby(['Season']).sum('PTS')  # Total number of points in the season

nba_filter_ML = nba[['TEAM', 'PTS']]

nba_filter_ML3 = nba_filter_ML2.groupby(['TEAM']).sum('PTS').sort_values('PTS', ascending = False)


# ----------------        Clean data         ---------------- 

# Rename a column

nba.rename(columns={"PTS":"Points"})
nba.rename(columns={"TEAM": "team"})
